'use strict';

/**
 * gamelogic.js
 */

(function () {
	//

	var EPSILON = 1000;
	var config = {};

	// Actions performed when current game settings recieved
	function onAgSetupEvent(event) {
		console.log('agSetupEvent: ' + JSON.stringify(event.detail));
		//
		config.movements = event.detail.commands;
		//
		var audioFileURL = 'http://' + window.location.hostname + 'songs/' + event.detail.song;
		// let audioFileURL = '../audio/' + event.detail.song;
		console.log('audio file url: ' + audioFileURL);
		config.audio = new Howl({
			urls: [audioFileURL],
			autoplay: false,
			volume: 0.8
		});
		// Generate new event for the view.
		var newEvent = new CustomEvent('glSetupEvent', { detail: { song: event.detail.song, bpm: event.detail.bpm, commands: event.detail.commands, music: config.audio } });
		document.dispatchEvent(newEvent);
		// BPM, minInterval, beginning offset
		config.bpm = event.detail.bpm;
		config.minInterval = 60000 / config.bpm;
		config.beginningOffset = event.detail.offset;
		// Start.
		config.score = 0;
		config.startDate = Date.now();
		config.displayedIndex = 0;
		config.lastReceivedIndex = 0;
		config.lastPerformedAction = undefined;
		function sendMovement() {
			// Set deciding the status in the future.
			setTimeout(function () {
				//var index = Math.round((config.lastPerformedAction.time - config.startDate - config.beginningOffset) / config.minInterval);
				var index = config.displayedIndex - 4;
				var valid = config.lastPerformedAction.movement == config.movements[index] && Math.abs(config.lastPerformedAction.time - Date.now()) < config.minInterval / 2;
				if (valid) {
					config.score += 100;
					console.log(index);
					var newEvent = new CustomEvent('glStatus', { detail: {
							status: "success",
							index: index,
							newScore: config.score
						} });
					document.dispatchEvent(newEvent);
				} else {
					config.score -= 10;
					var newEvent = new CustomEvent('glStatus', { detail: {
							status: "fail",
							index: index,
							newScore: config.score
						} });
					document.dispatchEvent(newEvent);
				}
				config.lastPerformedAction = 'pass';
			}, config.minInterval * 4);
			//
			var newEvent = new CustomEvent('glAddMovement', { detail: config.movements[config.displayedIndex] });
			// console.log(newEvent);
			config.displayedIndex++;
			document.dispatchEvent(newEvent);
			config.timer = setTimeout(sendMovement, config.minInterval);
		}
		setTimeout(sendMovement, config.beginningOffset);
		config.audio.play();
	}

	function onAgCommandEvent(event) {
		// console.log('agCommandEvent: ' + JSON.stringify(event.detail));
		if (event.detail.movement == 'stop') clearInterval(config.timer);
		config.lastPerformedAction = event.detail;
	}

	document.addEventListener('agSetupEvent', onAgSetupEvent);
	document.addEventListener('agCommandEvent', onAgCommandEvent);
})();
//# sourceMappingURL=data:application/json;base64,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QSxZQUFTLGFBQVQsQ0FBdUIsUUFBdkI7QUFDQSxVQUFPLEtBQVAsR0FBZSxXQUFXLFlBQVgsRUFBeUIsT0FBTyxXQUFoQyxDQUFmO0FBQ0g7QUFDRCxhQUFXLFlBQVgsRUFBeUIsT0FBTyxlQUFoQztBQUNBLFNBQU8sS0FBUCxDQUFhLElBQWI7QUFDRTs7QUFFQyxVQUFTLGdCQUFULENBQTBCLEtBQTFCLEVBQWlDOztBQUVwQyxNQUFJLE1BQU0sTUFBTixDQUFhLFFBQWIsSUFBeUIsTUFBN0IsRUFBcUMsY0FBYyxPQUFPLEtBQXJCO0FBQ3JDLFNBQU8sbUJBQVAsR0FBNkIsTUFBTSxNQUFuQztBQUNJOztBQUVELFVBQVMsZ0JBQVQsQ0FBMEIsY0FBMUIsRUFBMEMsY0FBMUM7QUFDQSxVQUFTLGdCQUFULENBQTBCLGdCQUExQixFQUE0QyxnQkFBNUM7QUFDSCxDQTNGRCIsImZpbGUiOiJnYW1lbG9naWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGdhbWVsb2dpYy5qc1xuICovXG5cbihmdW5jdGlvbigpIHtcbiAgICAvL1xuXG4gICAgdmFyIEVQU0lMT04gPSAxMDAwO1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIC8vIEFjdGlvbnMgcGVyZm9ybWVkIHdoZW4gY3VycmVudCBnYW1lIHNldHRpbmdzIHJlY2lldmVkXG4gICAgZnVuY3Rpb24gb25BZ1NldHVwRXZlbnQoZXZlbnQpIHtcblx0Y29uc29sZS5sb2coJ2FnU2V0dXBFdmVudDogJyArIEpTT04uc3RyaW5naWZ5KGV2ZW50LmRldGFpbCkpO1xuXHQvL1xuICAgIFx0Y29uZmlnLm1vdmVtZW50cyA9IGV2ZW50LmRldGFpbC5jb21tYW5kcztcblx0Ly9cblx0bGV0IGF1ZGlvRmlsZVVSTCA9ICdodHRwOi8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArICdzb25ncy8nICsgZXZlbnQuZGV0YWlsLnNvbmc7XG5cdC8vIGxldCBhdWRpb0ZpbGVVUkwgPSAnLi4vYXVkaW8vJyArIGV2ZW50LmRldGFpbC5zb25nO1xuXHRjb25zb2xlLmxvZygnYXVkaW8gZmlsZSB1cmw6ICcgKyBhdWRpb0ZpbGVVUkwpO1xuXHRjb25maWcuYXVkaW8gPSBuZXcgSG93bCh7XG5cdCAgICB1cmxzOiBbYXVkaW9GaWxlVVJMXSxcblx0ICAgIGF1dG9wbGF5OiBmYWxzZSxcblx0ICAgIHZvbHVtZTogMC44LFxuXHR9KTtcblx0Ly8gR2VuZXJhdGUgbmV3IGV2ZW50IGZvciB0aGUgdmlldy5cblx0dmFyIG5ld0V2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFxuXHQgICAgJ2dsU2V0dXBFdmVudCcsXG5cdCAgICB7ZGV0YWlsOiB7c29uZzogZXZlbnQuZGV0YWlsLnNvbmcsIGJwbTogZXZlbnQuZGV0YWlsLmJwbSwgY29tbWFuZHM6IGV2ZW50LmRldGFpbC5jb21tYW5kcywgbXVzaWM6IGNvbmZpZy5hdWRpb319XG5cdCk7XG5cdGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3RXZlbnQpO1xuXHQvLyBCUE0sIG1pbkludGVydmFsLCBiZWdpbm5pbmcgb2Zmc2V0XG5cdGNvbmZpZy5icG0gPSBldmVudC5kZXRhaWwuYnBtO1xuXHRjb25maWcubWluSW50ZXJ2YWwgPSA2MDAwMCAvIGNvbmZpZy5icG07XG5cdGNvbmZpZy5iZWdpbm5pbmdPZmZzZXQgPSBldmVudC5kZXRhaWwub2Zmc2V0O1xuXHQvLyBTdGFydC5cblx0Y29uZmlnLnNjb3JlID0gMDtcblx0Y29uZmlnLnN0YXJ0RGF0ZSA9IERhdGUubm93KCk7XG5cdGNvbmZpZy5kaXNwbGF5ZWRJbmRleCA9IDA7XG5cdGNvbmZpZy5sYXN0UmVjZWl2ZWRJbmRleCA9IDA7XG5cdGNvbmZpZy5sYXN0UGVyZm9ybWVkQWN0aW9uID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBzZW5kTW92ZW1lbnQoKSB7XG5cdCAgICAvLyBTZXQgZGVjaWRpbmcgdGhlIHN0YXR1cyBpbiB0aGUgZnV0dXJlLlxuXHQgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHQvL3ZhciBpbmRleCA9IE1hdGgucm91bmQoKGNvbmZpZy5sYXN0UGVyZm9ybWVkQWN0aW9uLnRpbWUgLSBjb25maWcuc3RhcnREYXRlIC0gY29uZmlnLmJlZ2lubmluZ09mZnNldCkgLyBjb25maWcubWluSW50ZXJ2YWwpO1xuXHRcdHZhciBpbmRleCA9IGNvbmZpZy5kaXNwbGF5ZWRJbmRleCAtIDQ7XG5cdFx0dmFyIHZhbGlkID0gY29uZmlnLmxhc3RQZXJmb3JtZWRBY3Rpb24ubW92ZW1lbnQgPT0gY29uZmlnLm1vdmVtZW50c1tpbmRleF0gJiZcblx0XHQgICAgTWF0aC5hYnMoY29uZmlnLmxhc3RQZXJmb3JtZWRBY3Rpb24udGltZSAtIERhdGUubm93KCkpIDwgY29uZmlnLm1pbkludGVydmFsIC8gMjtcblx0XHRpZiAodmFsaWQpIHtcblx0XHQgICAgY29uZmlnLnNjb3JlICs9IDEwMDtcblx0XHQgICAgY29uc29sZS5sb2coaW5kZXgpO1xuXHRcdCAgICB2YXIgbmV3RXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXG5cdFx0XHQnZ2xTdGF0dXMnLFxuXHRcdFx0e2RldGFpbDoge1xuXHRcdFx0ICAgIHN0YXR1czogXCJzdWNjZXNzXCIsXG5cdFx0XHQgICAgaW5kZXg6IGluZGV4LFxuXHRcdFx0ICAgIG5ld1Njb3JlOiBjb25maWcuc2NvcmVcblx0XHRcdH19XG5cdFx0ICAgICk7XG5cdFx0ICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3RXZlbnQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0ICAgIGNvbmZpZy5zY29yZSAtPSAxMDtcblx0XHQgICAgdmFyIG5ld0V2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFxuXHRcdFx0J2dsU3RhdHVzJyxcblx0XHRcdHtkZXRhaWw6IHtcblx0XHRcdCAgICBzdGF0dXM6IFwiZmFpbFwiLFxuXHRcdFx0ICAgIGluZGV4OiBpbmRleCxcblx0XHRcdCAgICBuZXdTY29yZTogY29uZmlnLnNjb3JlXG5cdFx0XHR9fVxuXHRcdCAgICApO1xuXHRcdCAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0XHR9XG5cdFx0Y29uZmlnLmxhc3RQZXJmb3JtZWRBY3Rpb24gPSAncGFzcyc7XG5cdCAgICB9LCBjb25maWcubWluSW50ZXJ2YWwqNCk7XG5cdCAgICAvL1xuXHQgICAgdmFyIG5ld0V2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFxuXHRcdCdnbEFkZE1vdmVtZW50Jyxcblx0XHR7ZGV0YWlsOiBjb25maWcubW92ZW1lbnRzW2NvbmZpZy5kaXNwbGF5ZWRJbmRleF19XG5cdCAgICApO1xuXHQgICAgLy8gY29uc29sZS5sb2cobmV3RXZlbnQpO1xuXHQgICAgY29uZmlnLmRpc3BsYXllZEluZGV4Kys7XG5cdCAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0ICAgIGNvbmZpZy50aW1lciA9IHNldFRpbWVvdXQoc2VuZE1vdmVtZW50LCBjb25maWcubWluSW50ZXJ2YWwpO1xuXHR9XG5cdHNldFRpbWVvdXQoc2VuZE1vdmVtZW50LCBjb25maWcuYmVnaW5uaW5nT2Zmc2V0KTtcblx0Y29uZmlnLmF1ZGlvLnBsYXkoKTtcbiAgfVxuXG4gICAgZnVuY3Rpb24gb25BZ0NvbW1hbmRFdmVudChldmVudCkge1xuXHQvLyBjb25zb2xlLmxvZygnYWdDb21tYW5kRXZlbnQ6ICcgKyBKU09OLnN0cmluZ2lmeShldmVudC5kZXRhaWwpKTtcblx0aWYgKGV2ZW50LmRldGFpbC5tb3ZlbWVudCA9PSAnc3RvcCcpIGNsZWFySW50ZXJ2YWwoY29uZmlnLnRpbWVyKTtcblx0Y29uZmlnLmxhc3RQZXJmb3JtZWRBY3Rpb24gPSBldmVudC5kZXRhaWw7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYWdTZXR1cEV2ZW50Jywgb25BZ1NldHVwRXZlbnQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FnQ29tbWFuZEV2ZW50Jywgb25BZ0NvbW1hbmRFdmVudCk7XG59KSgpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
