'use strict';

/**
 * gamelogic.js
 */

(function () {
	//

	var EPSILON = 1000;
	var config = {};

	// Actions performed when current game settings recieved
	function onAgSetupEvent(event) {
		console.log('agSetupEvent: ' + JSON.stringify(event.detail));
		//
		config.movements = event.detail.commands;
		//
		var audioFileURL = 'http://public/' + window.location.hostname + '/songs/' + event.detail.song;
		// let audioFileURL = '../audio/' + event.detail.song;
		console.log('audio file url: ' + audioFileURL);
		config.audio = new Howl({
			urls: [audioFileURL],
			autoplay: false,
			volume: 0.8
		});
		// Generate new event for the view.
		var newEvent = new CustomEvent('glSetupEvent', { detail: { song: event.detail.song, bpm: event.detail.bpm, commands: event.detail.commands, music: config.audio } });
		document.dispatchEvent(newEvent);
		// BPM, minInterval, beginning offset
		config.bpm = event.detail.bpm;
		config.minInterval = 60000 / config.bpm;
		config.beginningOffset = event.detail.offset;
		// Start.
		config.score = 0;
		config.startDate = Date.now();
		config.displayedIndex = 0;
		config.lastReceivedIndex = 0;
		config.lastPerformedAction = undefined;
		function sendMovement() {
			// Set deciding the status in the future.
			setTimeout(function () {
				//var index = Math.round((config.lastPerformedAction.time - config.startDate - config.beginningOffset) / config.minInterval);
				var index = config.displayedIndex - 4;
				var valid = config.lastPerformedAction.movement == config.movements[index] && Math.abs(config.lastPerformedAction.time - Date.now()) < config.minInterval / 2;
				if (valid) {
					config.score += 100;
					console.log(index);
					var newEvent = new CustomEvent('glStatus', { detail: {
							status: "success",
							index: index,
							newScore: config.score
						} });
					document.dispatchEvent(newEvent);
				} else {
					config.score -= 10;
					var newEvent = new CustomEvent('glStatus', { detail: {
							status: "fail",
							index: index,
							newScore: config.score
						} });
					document.dispatchEvent(newEvent);
				}
				config.lastPerformedAction = 'pass';
			}, config.minInterval * 4);
			//
			var newEvent = new CustomEvent('glAddMovement', { detail: config.movements[config.displayedIndex] });
			// console.log(newEvent);
			config.displayedIndex++;
			document.dispatchEvent(newEvent);
			config.timer = setTimeout(sendMovement, config.minInterval);
		}
		setTimeout(sendMovement, config.beginningOffset);
		config.audio.play();
	}

	function onAgCommandEvent(event) {
		// console.log('agCommandEvent: ' + JSON.stringify(event.detail));
		if (event.detail.movement == 'stop') clearInterval(config.timer);
		config.lastPerformedAction = event.detail;
	}

	document.addEventListener('agSetupEvent', onAgSetupEvent);
	document.addEventListener('agCommandEvent', onAgCommandEvent);
})();
//# sourceMappingURL=data:application/json;base64,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QUNBLFlBQVMsYUFBVCxDQUF1QixRQUF2QjtBQUNBLFVBQU8sS0FBUCxHQUFlLFdBQVcsWUFBWCxFQUF5QixPQUFPLFdBQWhDLENBQWY7QUFDSDtBQUNELGFBQVcsWUFBWCxFQUF5QixPQUFPLGVBQWhDO0FBQ0EsU0FBTyxLQUFQLENBQWEsSUFBYjtBQUNFOztBQUVDLFVBQVMsZ0JBQVQsQ0FBMEIsS0FBMUIsRUFBaUM7O0FBRXBDLE1BQUksTUFBTSxNQUFOLENBQWEsUUFBYixJQUF5QixNQUE3QixFQUFxQyxjQUFjLE9BQU8sS0FBckI7QUFDckMsU0FBTyxtQkFBUCxHQUE2QixNQUFNLE1BQW5DO0FBQ0k7O0FBRUQsVUFBUyxnQkFBVCxDQUEwQixjQUExQixFQUEwQyxjQUExQztBQUNBLFVBQVMsZ0JBQVQsQ0FBMEIsZ0JBQTFCLEVBQTRDLGdCQUE1QztBQUNILENBM0ZEIiwiZmlsZSI6ImdhbWVsb2dpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogZ2FtZWxvZ2ljLmpzXG4gKi9cblxuKGZ1bmN0aW9uKCkge1xuICAgIC8vXG5cbiAgICB2YXIgRVBTSUxPTiA9IDEwMDA7XG4gICAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gICAgLy8gQWN0aW9ucyBwZXJmb3JtZWQgd2hlbiBjdXJyZW50IGdhbWUgc2V0dGluZ3MgcmVjaWV2ZWRcbiAgICBmdW5jdGlvbiBvbkFnU2V0dXBFdmVudChldmVudCkge1xuXHRjb25zb2xlLmxvZygnYWdTZXR1cEV2ZW50OiAnICsgSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGV0YWlsKSk7XG5cdC8vXG4gICAgXHRjb25maWcubW92ZW1lbnRzID0gZXZlbnQuZGV0YWlsLmNvbW1hbmRzO1xuXHQvL1xuXHRsZXQgYXVkaW9GaWxlVVJMID0gJ2h0dHA6Ly9wdWJsaWMvJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArICcvc29uZ3MvJyArIGV2ZW50LmRldGFpbC5zb25nO1xuXHQvLyBsZXQgYXVkaW9GaWxlVVJMID0gJy4uL2F1ZGlvLycgKyBldmVudC5kZXRhaWwuc29uZztcblx0Y29uc29sZS5sb2coJ2F1ZGlvIGZpbGUgdXJsOiAnICsgYXVkaW9GaWxlVVJMKTtcblx0Y29uZmlnLmF1ZGlvID0gbmV3IEhvd2woe1xuXHQgICAgdXJsczogW2F1ZGlvRmlsZVVSTF0sXG5cdCAgICBhdXRvcGxheTogZmFsc2UsXG5cdCAgICB2b2x1bWU6IDAuOCxcblx0fSk7XG5cdC8vIEdlbmVyYXRlIG5ldyBldmVudCBmb3IgdGhlIHZpZXcuXG5cdHZhciBuZXdFdmVudCA9IG5ldyBDdXN0b21FdmVudChcblx0ICAgICdnbFNldHVwRXZlbnQnLFxuXHQgICAge2RldGFpbDoge3Nvbmc6IGV2ZW50LmRldGFpbC5zb25nLCBicG06IGV2ZW50LmRldGFpbC5icG0sIGNvbW1hbmRzOiBldmVudC5kZXRhaWwuY29tbWFuZHMsIG11c2ljOiBjb25maWcuYXVkaW99fVxuXHQpO1xuXHRkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0Ly8gQlBNLCBtaW5JbnRlcnZhbCwgYmVnaW5uaW5nIG9mZnNldFxuXHRjb25maWcuYnBtID0gZXZlbnQuZGV0YWlsLmJwbTtcblx0Y29uZmlnLm1pbkludGVydmFsID0gNjAwMDAgLyBjb25maWcuYnBtO1xuXHRjb25maWcuYmVnaW5uaW5nT2Zmc2V0ID0gZXZlbnQuZGV0YWlsLm9mZnNldDtcblx0Ly8gU3RhcnQuXG5cdGNvbmZpZy5zY29yZSA9IDA7XG5cdGNvbmZpZy5zdGFydERhdGUgPSBEYXRlLm5vdygpO1xuXHRjb25maWcuZGlzcGxheWVkSW5kZXggPSAwO1xuXHRjb25maWcubGFzdFJlY2VpdmVkSW5kZXggPSAwO1xuXHRjb25maWcubGFzdFBlcmZvcm1lZEFjdGlvbiA9IHVuZGVmaW5lZDtcblx0ZnVuY3Rpb24gc2VuZE1vdmVtZW50KCkge1xuXHQgICAgLy8gU2V0IGRlY2lkaW5nIHRoZSBzdGF0dXMgaW4gdGhlIGZ1dHVyZS5cblx0ICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0Ly92YXIgaW5kZXggPSBNYXRoLnJvdW5kKChjb25maWcubGFzdFBlcmZvcm1lZEFjdGlvbi50aW1lIC0gY29uZmlnLnN0YXJ0RGF0ZSAtIGNvbmZpZy5iZWdpbm5pbmdPZmZzZXQpIC8gY29uZmlnLm1pbkludGVydmFsKTtcblx0XHR2YXIgaW5kZXggPSBjb25maWcuZGlzcGxheWVkSW5kZXggLSA0O1xuXHRcdHZhciB2YWxpZCA9IGNvbmZpZy5sYXN0UGVyZm9ybWVkQWN0aW9uLm1vdmVtZW50ID09IGNvbmZpZy5tb3ZlbWVudHNbaW5kZXhdICYmXG5cdFx0ICAgIE1hdGguYWJzKGNvbmZpZy5sYXN0UGVyZm9ybWVkQWN0aW9uLnRpbWUgLSBEYXRlLm5vdygpKSA8IGNvbmZpZy5taW5JbnRlcnZhbCAvIDI7XG5cdFx0aWYgKHZhbGlkKSB7XG5cdFx0ICAgIGNvbmZpZy5zY29yZSArPSAxMDA7XG5cdFx0ICAgIGNvbnNvbGUubG9nKGluZGV4KTtcblx0XHQgICAgdmFyIG5ld0V2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFxuXHRcdFx0J2dsU3RhdHVzJyxcblx0XHRcdHtkZXRhaWw6IHtcblx0XHRcdCAgICBzdGF0dXM6IFwic3VjY2Vzc1wiLFxuXHRcdFx0ICAgIGluZGV4OiBpbmRleCxcblx0XHRcdCAgICBuZXdTY29yZTogY29uZmlnLnNjb3JlXG5cdFx0XHR9fVxuXHRcdCAgICApO1xuXHRcdCAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTtcblx0XHR9IGVsc2Uge1xuXHRcdCAgICBjb25maWcuc2NvcmUgLT0gMTA7XG5cdFx0ICAgIHZhciBuZXdFdmVudCA9IG5ldyBDdXN0b21FdmVudChcblx0XHRcdCdnbFN0YXR1cycsXG5cdFx0XHR7ZGV0YWlsOiB7XG5cdFx0XHQgICAgc3RhdHVzOiBcImZhaWxcIixcblx0XHRcdCAgICBpbmRleDogaW5kZXgsXG5cdFx0XHQgICAgbmV3U2NvcmU6IGNvbmZpZy5zY29yZVxuXHRcdFx0fX1cblx0XHQgICAgKTtcblx0XHQgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXdFdmVudCk7XG5cdFx0fVxuXHRcdGNvbmZpZy5sYXN0UGVyZm9ybWVkQWN0aW9uID0gJ3Bhc3MnO1xuXHQgICAgfSwgY29uZmlnLm1pbkludGVydmFsKjQpO1xuXHQgICAgLy9cblx0ICAgIHZhciBuZXdFdmVudCA9IG5ldyBDdXN0b21FdmVudChcblx0XHQnZ2xBZGRNb3ZlbWVudCcsXG5cdFx0e2RldGFpbDogY29uZmlnLm1vdmVtZW50c1tjb25maWcuZGlzcGxheWVkSW5kZXhdfVxuXHQgICAgKTtcblx0ICAgIC8vIGNvbnNvbGUubG9nKG5ld0V2ZW50KTtcblx0ICAgIGNvbmZpZy5kaXNwbGF5ZWRJbmRleCsrO1xuXHQgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXdFdmVudCk7XG5cdCAgICBjb25maWcudGltZXIgPSBzZXRUaW1lb3V0KHNlbmRNb3ZlbWVudCwgY29uZmlnLm1pbkludGVydmFsKTtcblx0fVxuXHRzZXRUaW1lb3V0KHNlbmRNb3ZlbWVudCwgY29uZmlnLmJlZ2lubmluZ09mZnNldCk7XG5cdGNvbmZpZy5hdWRpby5wbGF5KCk7XG4gIH1cblxuICAgIGZ1bmN0aW9uIG9uQWdDb21tYW5kRXZlbnQoZXZlbnQpIHtcblx0Ly8gY29uc29sZS5sb2coJ2FnQ29tbWFuZEV2ZW50OiAnICsgSlNPTi5zdHJpbmdpZnkoZXZlbnQuZGV0YWlsKSk7XG5cdGlmIChldmVudC5kZXRhaWwubW92ZW1lbnQgPT0gJ3N0b3AnKSBjbGVhckludGVydmFsKGNvbmZpZy50aW1lcik7XG5cdGNvbmZpZy5sYXN0UGVyZm9ybWVkQWN0aW9uID0gZXZlbnQuZGV0YWlsO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2FnU2V0dXBFdmVudCcsIG9uQWdTZXR1cEV2ZW50KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdhZ0NvbW1hbmRFdmVudCcsIG9uQWdDb21tYW5kRXZlbnQpO1xufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
